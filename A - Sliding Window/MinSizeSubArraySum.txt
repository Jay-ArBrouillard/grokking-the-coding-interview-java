class MinSizeSubArraySum {
// My attempt. 
// I tried to start with a window size of 1, slide the window to see windowSum reached S, otherwise, increase window size by one.
// After increasing window size the window must be moved back to the beginning.
  public static int findMinSubArray(int S, int[] arr) {
    //Sliding window size
    int length = 1;

    while (length < arr.length) {
      int windowSum = 0;
      int windowStart = 0;
      for (int windowEnd = 0; windowEnd < arr.length; windowEnd++) {
        windowSum += arr[windowEnd]; // add the next element
        // slide the window, we don't need to slide if we've not hit the required window size of 'minLength'
        if (windowEnd >= length - 1) {
          if (windowSum >= S) return length;
          windowSum -= arr[windowStart]; // subtract the element going out
          windowStart++; // slide the window ahead
        }
      }
      length++;
    }
    return arr.length;
  }

/* Optimal solution
Time Complexity#
The outer for loop runs for all elements, and the inner while loop processes each element only once; therefore, the time complexity of the algorithm will be O(N+N).
O(N)

Space Complexity#
O(1)
*/
  public static int findMinSubArray(int S, int[] arr) {
    int windowSum = 0, minLength = Integer.MAX_VALUE, windowStart = 0;
    for (int windowEnd = 0; windowEnd < arr.length; windowEnd++) {
      windowSum += arr[windowEnd]; // add the next element
      // shrink the window as small as possible until the 'windowSum' is smaller than 'S'
      while (windowSum >= S) {
        minLength = Math.min(minLength, windowEnd - windowStart + 1);
        windowSum -= arr[windowStart]; // subtract the element going out
        windowStart++; // slide the window ahead
      }
    }

    return minLength == Integer.MAX_VALUE ? 0 : minLength;
  }

  public static void main(String[] args) {
    int result = MinSizeSubArraySum.findMinSubArray(7, new int[] { 2, 1, 5, 2, 3, 2 });
    System.out.println("Smallest subarray length: " + result);
    result = MinSizeSubArraySum.findMinSubArray(7, new int[] { 2, 1, 5, 2, 8 });
    System.out.println("Smallest subarray length: " + result);
    result = MinSizeSubArraySum.findMinSubArray(8, new int[] { 3, 4, 1, 1, 6 });
    System.out.println("Smallest subarray length: " + result);
  }
}
