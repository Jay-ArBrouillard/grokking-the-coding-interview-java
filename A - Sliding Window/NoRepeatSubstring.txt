import java.util.*;

class NoRepeatSubstring {
// My attempt
  public static int findLength(String str) {
    //String="aabccbb"
    //longestDistinctSubstring = 3, windowStart = 1, windowEnd = 4;
    //{'a' -> 1, 'b' -> 1, 'c' -> 2}
    int longestDistinctSubstring = 0, windowStart = 0;
    Map<Character, Integer> distinctCharacters = new HashMap<>();
    for (int windowEnd = 0; windowEnd < str.length(); windowEnd++) {
      char curr = str.charAt(windowEnd);
      distinctCharacters.put(curr, distinctCharacters.getOrDefault(curr, 0) + 1);
      while (distinctCharacters.containsValue(2)) {
        longestDistinctSubstring = Math.max(longestDistinctSubstring, windowEnd - windowStart);
        char firstChar = str.charAt(windowStart);
        distinctCharacters.put(firstChar, distinctCharacters.get(firstChar) - 1);
        if (distinctCharacters.get(firstChar) == 0) {
          distinctCharacters.remove(firstChar);
        }
        windowStart++;
      }
    }
    return longestDistinctSubstring;
  }

// Optimal Solution
// Time Complexity: O(N)
// Space Complexity: O(1) Assuming fixed character set
  public static int findLength(String str) {
    int windowStart = 0, maxLength = 0;
    Map<Character, Integer> charIndexMap = new HashMap<>();
    // try to extend the range [windowStart, windowEnd]
    for (int windowEnd = 0; windowEnd < str.length(); windowEnd++) {
      char rightChar = str.charAt(windowEnd);
      // if the map already contains the 'rightChar', shrink the window from the beginning so that
      // we have only one occurrence of 'rightChar'
      if (charIndexMap.containsKey(rightChar)) {
        // this is tricky; in the current window, we will not have any 'rightChar' after its previous index
        // and if 'windowStart' is already ahead of the last index of 'rightChar', we'll keep 'windowStart'
        windowStart = Math.max(windowStart, charIndexMap.get(rightChar) + 1);
      }
      charIndexMap.put(rightChar, windowEnd); // insert the 'rightChar' into the map
      maxLength = Math.max(maxLength, windowEnd - windowStart + 1); // remember the maximum length so far
    }

    return maxLength;
  }

  public static void main(String[] args) {
    System.out.println("Length of the longest substring: " + NoRepeatSubstring.findLength("aabccbb"));
    System.out.println("Length of the longest substring: " + NoRepeatSubstring.findLength("abbbb"));
    System.out.println("Length of the longest substring: " + NoRepeatSubstring.findLength("abccde"));
  }
}
